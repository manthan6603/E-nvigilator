{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MANTHAN PARMAR\\\\Desktop\\\\e proctor(test)\\\\frontend\\\\src\\\\Components\\\\StudentComponent\\\\StudentDashboard\\\\TestComponent\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  const history = useHistory();\n  const allQuestions = [{\n    questionId: 'q1',\n    questionText: \"What is the capital of France?\",\n    options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\n    correctAnswer: \"Paris\"\n  }, {\n    questionId: 'q2',\n    questionText: \"What is 2 + 2?\",\n    options: [\"3\", \"4\", \"5\", \"6\"],\n    correctAnswer: \"4\"\n  }, {\n    questionId: 'q3',\n    questionText: \"Who wrote Hamlet?\",\n    options: [\"William Shakespeare\", \"Charles Dickens\", \"Leo Tolstoy\", \"Mark Twain\"],\n    correctAnswer: \"William Shakespeare\"\n  }, {\n    questionId: 'q4',\n    questionText: \"What is the largest ocean on Earth?\",\n    options: [\"Atlantic Ocean\", \"Indian Ocean\", \"Arctic Ocean\", \"Pacific Ocean\"],\n    correctAnswer: \"Pacific Ocean\"\n  }, {\n    questionId: 'q5',\n    questionText: \"What year did the Titanic sink?\",\n    options: [\"1912\", \"1905\", \"1898\", \"1923\"],\n    correctAnswer: \"1912\"\n  }];\n  const [answers, setAnswers] = useState({});\n  function handleAnswerChange(event, questionId) {\n    setAnswers({\n      ...answers,\n      [questionId]: event.target.value\n    });\n  }\n  function submitTest() {\n    const score = allQuestions.reduce((totalScore, question) => {\n      return totalScore + (answers[question.questionId] === question.correctAnswer ? 1 : 0);\n    }, 0);\n    const results = {\n      answers: answers,\n      score: score,\n      totalQuestions: allQuestions.length\n    };\n    sessionStorage.setItem('examResults', JSON.stringify(results));\n    history.push(\"/results\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [allQuestions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), question.options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: question.questionId,\n          value: option,\n          checked: answers[question.questionId] === option,\n          onChange: e => handleAnswerChange(e, question.questionId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this), option]\n      }, option, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this))]\n    }, question.questionId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitTest,\n      children: \"Submit Exam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"V8vJUQ5+rsy5floPP72XO/lEjOs=\", false, function () {\n  return [useHistory];\n});\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","Test","_s","history","allQuestions","questionId","questionText","options","correctAnswer","answers","setAnswers","handleAnswerChange","event","target","value","submitTest","score","reduce","totalScore","question","results","totalQuestions","length","sessionStorage","setItem","JSON","stringify","push","children","map","fileName","_jsxFileName","lineNumber","columnNumber","option","type","name","checked","onChange","e","onClick","_c","$RefreshReg$"],"sources":["C:/Users/MANTHAN PARMAR/Desktop/e proctor(test)/frontend/src/Components/StudentComponent/StudentDashboard/TestComponent/Test.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Test() {\r\n    const history = useHistory();\r\n\r\n    const allQuestions = [\r\n        {\r\n            questionId: 'q1',\r\n            questionText: \"What is the capital of France?\",\r\n            options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\r\n            correctAnswer: \"Paris\"\r\n        },\r\n        {\r\n            questionId: 'q2',\r\n            questionText: \"What is 2 + 2?\",\r\n            options: [\"3\", \"4\", \"5\", \"6\"],\r\n            correctAnswer: \"4\"\r\n        },\r\n        {\r\n            questionId: 'q3',\r\n            questionText: \"Who wrote Hamlet?\",\r\n            options: [\"William Shakespeare\", \"Charles Dickens\", \"Leo Tolstoy\", \"Mark Twain\"],\r\n            correctAnswer: \"William Shakespeare\"\r\n        },\r\n        {\r\n            questionId: 'q4',\r\n            questionText: \"What is the largest ocean on Earth?\",\r\n            options: [\"Atlantic Ocean\", \"Indian Ocean\", \"Arctic Ocean\", \"Pacific Ocean\"],\r\n            correctAnswer: \"Pacific Ocean\"\r\n        },\r\n        {\r\n            questionId: 'q5',\r\n            questionText: \"What year did the Titanic sink?\",\r\n            options: [\"1912\", \"1905\", \"1898\", \"1923\"],\r\n            correctAnswer: \"1912\"\r\n        }\r\n    ];\r\n\r\n    const [answers, setAnswers] = useState({});\r\n\r\n    function handleAnswerChange(event, questionId) {\r\n        setAnswers({\r\n            ...answers,\r\n            [questionId]: event.target.value\r\n        });\r\n    }\r\n\r\n    function submitTest() {\r\n        const score = allQuestions.reduce((totalScore, question) => {\r\n            return totalScore + (answers[question.questionId] === question.correctAnswer ? 1 : 0);\r\n        }, 0);\r\n\r\n        const results = {\r\n            answers: answers,\r\n            score: score,\r\n            totalQuestions: allQuestions.length\r\n        };\r\n\r\n        sessionStorage.setItem('examResults', JSON.stringify(results));\r\n        history.push(\"/results\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {allQuestions.map((question) => (\r\n                <div key={question.questionId}>\r\n                    <p>{question.questionText}</p>\r\n                    {question.options.map((option) => (\r\n                        <label key={option}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name={question.questionId}\r\n                                value={option}\r\n                                checked={answers[question.questionId] === option}\r\n                                onChange={(e) => handleAnswerChange(e, question.questionId)}\r\n                            />\r\n                            {option}\r\n                        </label>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n            <button onClick={submitTest}>Submit Exam</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}