{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MANTHAN PARMAR\\\\Desktop\\\\e proctor(test)\\\\frontend\\\\src\\\\Components\\\\StudentComponent\\\\StudentDashboard\\\\TestComponent\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  const {\n    id,\n    category\n  } = useParams();\n  const history = useHistory();\n  const allQuestions = [{\n    questionId: 'q1',\n    questionText: \"What is the capital of France?\",\n    options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\n    correctAnswer: \"Paris\"\n  }, {\n    questionId: 'q2',\n    questionText: \"What is 2 + 2?\",\n    options: [\"3\", \"4\", \"5\", \"6\"],\n    correctAnswer: \"4\"\n  }, {\n    questionId: 'q3',\n    questionText: \"Who wrote Hamlet?\",\n    options: [\"William Shakespeare\", \"Charles Dickens\", \"Leo Tolstoy\", \"Mark Twain\"],\n    correctAnswer: \"William Shakespeare\"\n  }, {\n    questionId: 'q4',\n    questionText: \"What is the largest ocean on Earth?\",\n    options: [\"Atlantic Ocean\", \"Indian Ocean\", \"Arctic Ocean\", \"Pacific Ocean\"],\n    correctAnswer: \"Pacific Ocean\"\n  }, {\n    questionId: 'q5',\n    questionText: \"What year did the Titanic sink?\",\n    options: [\"1912\", \"1905\", \"1898\", \"1923\"],\n    correctAnswer: \"1912\"\n  }];\n  const [answers, setAnswers] = useState({});\n  const handleAnswerChange = (event, questionId) => {\n    setAnswers({\n      ...answers,\n      [questionId]: event.target.value\n    });\n  };\n  const calculateScore = () => {\n    let score = 0;\n    allQuestions.forEach(question => {\n      if (answers[question.questionId] === question.correctAnswer) {\n        score += 1;\n      }\n    });\n    return score;\n  };\n  const submitTest = async () => {\n    const score = calculateScore();\n    const resultData = {\n      score,\n      totalQuestions: allQuestions.length,\n      answers\n    };\n    sessionStorage.setItem('examResults', JSON.stringify(resultData));\n    await axios.post('http://localhost:5000/finish_proctoring', resultData).then(response => {\n      console.log(response.data.message);\n      history.push(\"/StudentDashboard/Result\");\n    }).catch(error => {\n      console.error('Error finishing proctoring:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '800px',\n      margin: 'auto',\n      padding: '20px',\n      backgroundColor: '#f7f7f7',\n      borderRadius: '8px'\n    },\n    children: [allQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px',\n        padding: '20px',\n        backgroundColor: '#ffffff',\n        borderRadius: '5px',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: 'block',\n          margin: '5px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: question.questionId,\n          value: option,\n          checked: answers[question.questionId] === option,\n          onChange: e => handleAnswerChange(e, question.questionId),\n          style: {\n            marginRight: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this), option]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitTest,\n      style: {\n        width: '100%',\n        padding: '10px 0',\n        backgroundColor: '#0056b3',\n        color: 'white',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Submit Exam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"q65YCPUoBa5W9B45BeDtdaTjii0=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useHistory","useParams","axios","jsxDEV","_jsxDEV","Test","_s","id","category","history","allQuestions","questionId","questionText","options","correctAnswer","answers","setAnswers","handleAnswerChange","event","target","value","calculateScore","score","forEach","question","submitTest","resultData","totalQuestions","length","sessionStorage","setItem","JSON","stringify","post","then","response","console","log","data","message","push","catch","error","style","maxWidth","margin","padding","backgroundColor","borderRadius","children","map","index","marginBottom","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","option","optionIndex","display","type","name","checked","onChange","e","marginRight","onClick","width","color","cursor","_c","$RefreshReg$"],"sources":["C:/Users/MANTHAN PARMAR/Desktop/e proctor(test)/frontend/src/Components/StudentComponent/StudentDashboard/TestComponent/Test.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction Test() {\r\n    const { id, category } = useParams();\r\n    const history = useHistory();\r\n\r\n    const allQuestions = [\r\n        {\r\n            questionId: 'q1',\r\n            questionText: \"What is the capital of France?\",\r\n            options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\r\n            correctAnswer: \"Paris\"\r\n        },\r\n        {\r\n            questionId: 'q2',\r\n            questionText: \"What is 2 + 2?\",\r\n            options: [\"3\", \"4\", \"5\", \"6\"],\r\n            correctAnswer: \"4\"\r\n        },\r\n        {\r\n            questionId: 'q3',\r\n            questionText: \"Who wrote Hamlet?\",\r\n            options: [\"William Shakespeare\", \"Charles Dickens\", \"Leo Tolstoy\", \"Mark Twain\"],\r\n            correctAnswer: \"William Shakespeare\"\r\n        },\r\n        {\r\n            questionId: 'q4',\r\n            questionText: \"What is the largest ocean on Earth?\",\r\n            options: [\"Atlantic Ocean\", \"Indian Ocean\", \"Arctic Ocean\", \"Pacific Ocean\"],\r\n            correctAnswer: \"Pacific Ocean\"\r\n        },\r\n        {\r\n            questionId: 'q5',\r\n            questionText: \"What year did the Titanic sink?\",\r\n            options: [\"1912\", \"1905\", \"1898\", \"1923\"],\r\n            correctAnswer: \"1912\"\r\n        }\r\n    ];\r\n\r\n    const [answers, setAnswers] = useState({});\r\n\r\n    const handleAnswerChange = (event, questionId) => {\r\n        setAnswers({\r\n            ...answers,\r\n            [questionId]: event.target.value\r\n        });\r\n    };\r\n\r\n    const calculateScore = () => {\r\n        let score = 0;\r\n        allQuestions.forEach(question => {\r\n            if (answers[question.questionId] === question.correctAnswer) {\r\n                score += 1;\r\n            }\r\n        });\r\n        return score;\r\n    };\r\n\r\n    const submitTest = async () => {\r\n        const score = calculateScore();\r\n        const resultData = {\r\n            score,\r\n            totalQuestions: allQuestions.length,\r\n            answers\r\n        };\r\n        sessionStorage.setItem('examResults', JSON.stringify(resultData));\r\n\r\n        await axios.post('http://localhost:5000/finish_proctoring', resultData)\r\n            .then(response => {\r\n                console.log(response.data.message);\r\n                history.push(\"/StudentDashboard/Result\");\r\n            })\r\n            .catch(error => {\r\n                console.error('Error finishing proctoring:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div style={{ maxWidth: '800px', margin: 'auto', padding: '20px', backgroundColor: '#f7f7f7', borderRadius: '8px' }}>\r\n            {allQuestions.map((question, index) => (\r\n                <div key={index} style={{ marginBottom: '20px', padding: '20px', backgroundColor: '#ffffff', borderRadius: '5px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\r\n                    <p>{question.questionText}</p>\r\n                    {question.options.map((option, optionIndex) => (\r\n                        <label key={optionIndex} style={{ display: 'block', margin: '5px 0' }}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name={question.questionId}\r\n                                value={option}\r\n                                checked={answers[question.questionId] === option}\r\n                                onChange={(e) => handleAnswerChange(e, question.questionId)}\r\n                                style={{ marginRight: '10px' }}\r\n                            />\r\n                            {option}\r\n                        </label>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n            <button onClick={submitTest} style={{ width: '100%', padding: '10px 0', backgroundColor: '#0056b3', color: 'white', borderRadius: '5px', cursor: 'pointer' }}>\r\n                Submit Exam\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}