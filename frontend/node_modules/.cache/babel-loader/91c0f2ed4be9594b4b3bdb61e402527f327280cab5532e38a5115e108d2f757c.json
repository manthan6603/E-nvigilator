{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MANTHAN PARMAR\\\\Desktop\\\\e proctor(test)\\\\frontend\\\\src\\\\Components\\\\StudentComponent\\\\StudentDashboard\\\\TestComponent\\\\Test.js\",\n  _s = $RefreshSig$();\ntest.js;\nimport React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://localhost:5000';\nfunction Test() {\n  _s();\n  const {\n    id,\n    category\n  } = useParams();\n  const history = useHistory();\n  const allQuestions = [{\n    questionId: 'q1',\n    questionText: \"What is the capital of France?\",\n    options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"]\n  }, {\n    questionId: 'q2',\n    questionText: \"What is 2 + 2?\",\n    options: [\"3\", \"4\", \"5\", \"6\"]\n  }, {\n    questionId: 'q3',\n    questionText: \"Who wrote Hamlet?\",\n    options: [\"William Shakespeare\", \"Charles Dickens\", \"Leo Tolstoy\", \"Mark Twain\"]\n  }, {\n    questionId: 'q4',\n    questionText: \"What is the largest ocean on Earth?\",\n    options: [\"Atlantic Ocean\", \"Indian Ocean\", \"Arctic Ocean\", \"Pacific Ocean\"]\n  }, {\n    questionId: 'q5',\n    questionText: \"What year did the Titanic sink?\",\n    options: [\"1912\", \"1905\", \"1898\", \"1923\"]\n  }];\n  const [answers, setAnswers] = useState({});\n  function handleAnswerChange(event, questionId) {\n    setAnswers({\n      ...answers,\n      [questionId]: event.target.value\n    });\n  }\n  function submitTest() {\n    axios.post('/finish_proctoring', {\n      answers\n    }).then(response => {\n      console.log('Proctoring finished:', response.data);\n      history.push(\"/StudentDashboard/Result\");\n    }).catch(error => {\n      console.error('Error finishing proctoring:', error);\n    });\n  }\n\n  // Inline styles\n  const styles = {\n    testContainer: {\n      maxWidth: '800px',\n      margin: 'auto',\n      padding: '20px',\n      backgroundColor: '#f7f7f7',\n      borderRadius: '8px',\n      boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n      fontFamily: 'Arial, sans-serif'\n    },\n    questionContainer: {\n      marginBottom: '20px',\n      padding: '20px',\n      backgroundColor: '#ffffff',\n      border: '1px solid #ddd',\n      borderRadius: '5px',\n      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n    },\n    questionText: {\n      fontSize: '18px',\n      color: '#333',\n      marginBottom: '15px'\n    },\n    optionLabel: {\n      display: 'block',\n      margin: '5px 0',\n      fontSize: '16px',\n      cursor: 'pointer'\n    },\n    radioButton: {\n      marginRight: '10px'\n    },\n    submitButton: {\n      display: 'block',\n      width: '100%',\n      padding: '10px 0',\n      backgroundColor: '#0056b3',\n      color: 'white',\n      border: 'none',\n      borderRadius: '5px',\n      fontSize: '16px',\n      fontWeight: 'bold',\n      textAlign: 'center',\n      cursor: 'pointer'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.testContainer,\n    children: [allQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.questionContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.questionText,\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), question.options.map((option, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n        style: styles.optionLabel,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: question.questionId,\n          value: option,\n          checked: answers[question.questionId] === option,\n          onChange: e => handleAnswerChange(e, question.questionId),\n          style: styles.radioButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this), option]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }, this))]\n    }, question.questionId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.submitButton,\n      onClick: submitTest,\n      children: \"Submit Exam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"q65YCPUoBa5W9B45BeDtdaTjii0=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["test","js","React","useState","useHistory","useParams","axios","jsxDEV","_jsxDEV","defaults","baseURL","Test","_s","id","category","history","allQuestions","questionId","questionText","options","answers","setAnswers","handleAnswerChange","event","target","value","submitTest","post","then","response","console","log","data","push","catch","error","styles","testContainer","maxWidth","margin","padding","backgroundColor","borderRadius","boxShadow","fontFamily","questionContainer","marginBottom","border","fontSize","color","optionLabel","display","cursor","radioButton","marginRight","submitButton","width","fontWeight","textAlign","style","children","map","question","index","fileName","_jsxFileName","lineNumber","columnNumber","option","i","type","name","checked","onChange","e","onClick","_c","$RefreshReg$"],"sources":["C:/Users/MANTHAN PARMAR/Desktop/e proctor(test)/frontend/src/Components/StudentComponent/StudentDashboard/TestComponent/Test.js"],"sourcesContent":["test.js\r\nimport React, { useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000';\r\n\r\nfunction Test() {\r\n    const { id, category } = useParams();\r\n    const history = useHistory();\r\n\r\n    const allQuestions = [\r\n        {\r\n            questionId: 'q1',\r\n            questionText: \"What is the capital of France?\",\r\n            options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"]\r\n        },\r\n        {\r\n            questionId: 'q2',\r\n            questionText: \"What is 2 + 2?\",\r\n            options: [\"3\", \"4\", \"5\", \"6\"]\r\n        },\r\n        {\r\n            questionId: 'q3',\r\n            questionText: \"Who wrote Hamlet?\",\r\n            options: [\"William Shakespeare\", \"Charles Dickens\", \"Leo Tolstoy\", \"Mark Twain\"]\r\n        },\r\n        {\r\n            questionId: 'q4',\r\n            questionText: \"What is the largest ocean on Earth?\",\r\n            options: [\"Atlantic Ocean\", \"Indian Ocean\", \"Arctic Ocean\", \"Pacific Ocean\"]\r\n        },\r\n        {\r\n            questionId: 'q5',\r\n            questionText: \"What year did the Titanic sink?\",\r\n            options: [\"1912\", \"1905\", \"1898\", \"1923\"]\r\n        }\r\n    ];\r\n\r\n    const [answers, setAnswers] = useState({});\r\n\r\n    function handleAnswerChange(event, questionId) {\r\n        setAnswers({\r\n            ...answers,\r\n            [questionId]: event.target.value\r\n        });\r\n    }\r\n\r\n    function submitTest() {\r\n        axios.post('/finish_proctoring', { answers })\r\n            .then(response => {\r\n                console.log('Proctoring finished:', response.data);\r\n                history.push(\"/StudentDashboard/Result\");\r\n            })\r\n            .catch(error => {\r\n                console.error('Error finishing proctoring:', error);\r\n            });\r\n    }\r\n\r\n    // Inline styles\r\n    const styles = {\r\n        testContainer: {\r\n            maxWidth: '800px',\r\n            margin: 'auto',\r\n            padding: '20px',\r\n            backgroundColor: '#f7f7f7',\r\n            borderRadius: '8px',\r\n            boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\r\n            fontFamily: 'Arial, sans-serif'\r\n        },\r\n        questionContainer: {\r\n            marginBottom: '20px',\r\n            padding: '20px',\r\n            backgroundColor: '#ffffff',\r\n            border: '1px solid #ddd',\r\n            borderRadius: '5px',\r\n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n        },\r\n        questionText: {\r\n            fontSize: '18px',\r\n            color: '#333',\r\n            marginBottom: '15px'\r\n        },\r\n        optionLabel: {\r\n            display: 'block',\r\n            margin: '5px 0',\r\n            fontSize: '16px',\r\n            cursor: 'pointer'\r\n        },\r\n        radioButton: {\r\n            marginRight: '10px'\r\n        },\r\n        submitButton: {\r\n            display: 'block',\r\n            width: '100%',\r\n            padding: '10px 0',\r\n            backgroundColor: '#0056b3',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '5px',\r\n            fontSize: '16px',\r\n            fontWeight: 'bold',\r\n            textAlign: 'center',\r\n            cursor: 'pointer'\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.testContainer}>\r\n            {allQuestions.map((question, index) => (\r\n                <div key={question.questionId} style={styles.questionContainer}>\r\n                    <p style={styles.questionText}>{question.questionText}</p>\r\n                    {question.options.map((option, i) => (\r\n                        <label key={i} style={styles.optionLabel}>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name={question.questionId}\r\n                                value={option}\r\n                                checked={answers[question.questionId] === option}\r\n                                onChange={(e) => handleAnswerChange(e, question.questionId)}\r\n                                style={styles.radioButton}\r\n                            />\r\n                            {option}\r\n                        </label>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n            <button style={styles.submitButton} onClick={submitTest}>Submit Exam</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}